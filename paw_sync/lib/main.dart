// This is the main entry point of the Paw Sync application.
// It will initialize Firebase, set up providers, and run the main app widget.

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart'; // Import Riverpod
import 'package:paw_sync/core/routing/app_router.dart'; // Import the AppRouter

// Import Firebase options. This file is generated by `flutterfire configure`
// or needs to be manually created by the user if not using the CLI.
import 'firebase_options.dart';

// This import will be generated by `flutter gen-l10n` after the user runs `flutter pub get`
// and the l10n.yaml file is processed.
import 'package:flutter_gen/gen_l10n/app_localizations.dart';


// Main function that Flutter execution starts from.
void main() async {
  // Ensure that Flutter's widget bindings are initialized before any async operations.
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase.
  try {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
    print("Firebase initialized successfully.");
  } catch (e) {
    print("Firebase initialization failed. Ensure 'firebase_options.dart' is present and correct,");
    print("and that platform-specific Firebase configuration files are in place.");
    print("Error: \$e");
  }

  // Run the root Flutter application widget, wrapped in a ProviderScope.
  // ProviderScope is what makes Riverpod providers available throughout the app.
  runApp(
    const ProviderScope(
      child: PawSyncApp(),
    ),
  );
}

/// The root widget of the Paw Sync application.
/// It's a ConsumerWidget to access Riverpod providers, specifically for the router.
class PawSyncApp extends ConsumerWidget {
  /// Creates the PawSyncApp widget.
  const PawSyncApp({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) { // WidgetRef added for ConsumerWidget
    // Get the router instance from AppRouter, passing the ref.
    final router = AppRouter.getRouter(ref);

    // MaterialApp.router is used when integrating with a routing package like GoRouter.
    return MaterialApp.router(
      title: 'Paw Sync',

      // Router configuration from app_router.dart
      routerConfig: router, // Use the router instance

      // Localization settings
      localizationsDelegates: const [
        AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('en', ''),
        Locale('fr', ''),
      ],
      // onGenerateTitle: (BuildContext context) {
      //   return AppLocalizations.of(context)?.appTitle ?? 'Paw Sync';
      // },

      // TODO: Theme will be loaded from 'lib/core/theme/theme.dart' later.
      // theme: getAppThemeData(context),
      // darkTheme: getAppDarkThemeData(context),
      // themeMode: ThemeMode.system,
    );
  }
}
